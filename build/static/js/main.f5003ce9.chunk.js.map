{"version":3,"sources":["router/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["routes","path","component","loadable","Promise","all","__webpack_require__","e","then","bind","router","react_default","a","createElement","react_router_dom","react_router","render","_ref","location","TransitionGroup","className","CSSTransition","key","pathname","classNames","timeout","appear","onExit","console","log","map","route","i","exact","App","src_router","Component","Boolean","window","hostname","match","toast","configure","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","toastClassName","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gWAcMA,SAAmB,CACvB,CACEC,KAAM,UACNC,UANeC,YAAS,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,cAQhC,CACER,KAAM,IACNC,UATSC,YAAS,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,cAW1B,CACER,KAAM,QACNC,UAZeC,YAAS,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,gBA4CnBC,EA7BA,WACb,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEC,OAAQ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACNP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAiBC,UAAU,aACzBT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEC,IAAKJ,EAASK,SACdC,WAAW,OACXC,QAAS,IACTC,QAAQ,EACRC,OAAQ,kBAAMC,QAAQC,IAAI,OAC1BlB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQG,SAAUA,GACflB,EAAO8B,IAAI,SAACC,EAAeC,GAAhB,OACVrB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEkB,OAAK,EACLhC,KAAM8B,EAAM9B,KACZqB,IAAKU,EACL9B,UAAW6B,EAAM7B,sBC3BtBgC,sMAVX,OACEvB,EAAAC,EAAAC,cAAA,QAAMO,UAAU,+BACdT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,qBACbT,EAAAC,EAAAC,cAACsB,EAAD,eALQC,cCKEC,QACW,cAA7BC,OAAOpB,SAASqB,UAEe,UAA7BD,OAAOpB,SAASqB,UAEhBD,OAAOpB,SAASqB,SAASC,MACvB,mFCVNC,IAAMC,UAAU,CACdC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,eAAgB,oBAGlBC,IAASlC,OAAOL,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,KAAK,SAAAiD,GACjCA,EAAaC","file":"static/js/main.f5003ce9.chunk.js","sourcesContent":["import React, { ReactNode, FC } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport loadable from '@loadable/component';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport 'styles/route.css';\n// import Login from 'pages/Login';\n\ninterface Routes {\n  path: string;\n  component?: FC | any;\n}\nconst CardEditor = loadable(() => import('../pages/CardEditor'));\nconst Home = loadable(() => import('../pages/Home'));\nconst SearchList = loadable(() => import('../pages/SearchList'));\nconst routes: Routes[] = [\n  {\n    path: '/editor',\n    component: CardEditor,\n  },\n  {\n    path: '/',\n    component: Home,\n  },\n  {\n    path: '/list',\n    component: SearchList,\n  },\n];\nconst router = () => {\n  return (\n    <Router>\n      <Route\n        render={({ location }): ReactNode => (\n          <TransitionGroup className='container'>\n            <CSSTransition\n              key={location.pathname}\n              classNames='fade'\n              timeout={300}\n              appear={true}\n              onExit={() => console.log(123)}>\n              <Switch location={location}>\n                {routes.map((route: Routes, i: number) => (\n                  <Route\n                    exact\n                    path={route.path}\n                    key={i}\n                    component={route.component}\n                  />\n                ))}\n              </Switch>\n            </CSSTransition>\n          </TransitionGroup>\n        )}\n      />\n    </Router>\n  );\n};\nexport default router;\n","import React, { Component } from 'react';\nimport Router from './router';\nimport './styles/reset.css';\nimport './styles/theme.css';\nimport './styles/layout.css';\nimport { hot } from 'react-hot-loader/root';\n\nclass App extends Component {\n  render() {\n    return (\n      <main className='theme__black app__container'>\n        <div className='router__container'>\n          <Router />\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './styles/toast.css';\n\ntoast.configure({\n  position: 'top-right',\n  autoClose: 2000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  toastClassName: 'toast_container',\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}