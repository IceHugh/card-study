{"version":3,"sources":["components/EditorTool/ButtonSave/Button.module.css","components/EditorTool/ButtonSave/index.tsx","components/EditorTool/index.tsx","api/fetch_until.ts","api/index.ts","assets/images/icon-avatar.jpeg","styles/pages/Login.module.css","components/InputText/index.tsx","components/ButtonSign/index.tsx","pages/Login.tsx","router/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","svg","svg_text","svg_text_load","ratateText","ButtonBox","styled","div","_templateObject","SaveText","_ref","load","onClick","textClass","styles","react_default","a","createElement","className","id","d","x","y","href","ButtonSave","props","ButtonSave_SaveText","BarBox","EditorTool_templateObject","EditorTool","EditorTool_ButtonSave","api","ky","create","prefixUrl","process","hooks","beforeRequest","Object","asyncToGenerator","regenerator_default","mark","_callee","options","token","wrap","_context","prev","next","localForage","getItem","sent","headers","set","concat","console","log","stop","_x","apply","this","arguments","afterResponse","_ref2","_callee2","response","ok","status","data","_context2","json","code","Response","abrupt","Error","toast","window","location","statusText","_x2","timeout","retry","__webpack_exports__","login","Ajax","post","postPost","patchPost","patch","deletePost","delete","searchParams","objectSpread","getPosts","get","getPostDetail","__webpack_require__","p","icon_avatar","InputBox","Label","label","_templateObject2","Line","_templateObject3","Input","input","_templateObject4","InputText","inputId","_ref$inputType","inputType","_ref$inputName","inputName","onChange","value","type","autoComplete","style","display","required","htmlFor","ButtonSign_templateObject","rotateButton","keyframes","ButtonSign_templateObject2","ButtonBack","ButtonSign_templateObject3","_ref3","_ref4","ButtonSign","prop","Page","main","Login_templateObject","LoginContainer","section","Login_templateObject2","activeStatus","LoginBox","Login_templateObject3","Avatar","Login_templateObject4","InputItem","_templateObject5","routes","path","component","history","_useState","useState","_useState2","slicedToArray","activate","_useState3","_useState4","loginStatus","activateLogin","_useState5","_useState6","name","setName","_useState7","_useState8","password","setPassword","md5Password","parseRes","md5","Api","username","setItem","success","push","pathname","t0","error","finish","src","IconAvatar","alt","components_InputText","e","target","components_ButtonSign","loadable","Promise","all","then","bind","router","react_router_dom","basename","react_router","render","TransitionGroup","CSSTransition","key","classNames","appear","onExit","map","route","i","exact","App","src_router","Component","Boolean","hostname","match","configure","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","toastClassName","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ebb90111.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"svg\":\"Button_svg__b2J5V\",\"svg_text\":\"Button_svg_text__7y_Sy\",\"svg_text_load\":\"Button_svg_text_load__2d9TE\",\"ratateText\":\"Button_ratateText__2BVmG\"};","import React from 'react';\nimport styled from 'styled-components';\nimport styles from './Button.module.css';\nconst ButtonBox = styled.div`\n  width: 40px;\n  cursor: pointer;\n  height: 100%;\n`;\nconst SaveText = ({ load, onClick }: porps) => {\n  const textClass = load ? styles.svg_text_load : styles.svg_text;\n  return (\n    <svg className={styles.svg} onClick={onClick}>\n      <defs>\n        <path id=\"line\" d=\"M0,22 L40, 22\" />\n        <path id=\"circle\" d=\"M15, 12 A5,5 0 1,1 25,23 A5,5 0 1,1 15,12\">\n          {/* <animate attributeName=\"d\" from=\"M0,15 L40, 15\" to=\"M13, 15 A7,7 1 1,1 27,15\" dur=\".5s\" repeatCount=\"1\" fill=\"freeze\"/> */}\n        </path>\n      </defs>\n      <g>\n        <text x=\"0\" y=\"0\" className={textClass}>\n          <textPath href={load ? '#circle' : '#line'}>save</textPath>\n        </text>\n      </g>\n    </svg>\n  );\n};\ninterface porps {\n  load: boolean;\n  onClick?: React.MouseEventHandler<any>;\n}\nconst ButtonSave = (props: porps) => {\n  return (\n    <ButtonBox>\n      <SaveText {...props} />\n    </ButtonBox>\n  );\n};\nexport default ButtonSave;\n","import React from 'react';\nimport styled from 'styled-components';\nimport ButtonSave from './ButtonSave';\n\nconst BarBox = styled.div`\n  display: flex;\n  height: 100%;\n`\nconst EditorTool = (props: any) => {\n  return (\n    <BarBox>\n      <ButtonSave {...props}/>\n    </BarBox>\n  )\n}\n\nexport default EditorTool;","import ky from 'ky';\nimport localForage from \"localforage\";\nimport { toast } from 'react-toastify';\n\nconst api = ky.create({\n  prefixUrl: process.env.REACT_APP_HOST,\n  hooks: {\n    beforeRequest: [\n      async options  => {\n        const token = await localForage.getItem('token');\n        const headers: any = options.headers;\n        headers.set('Authorization', `Bearer ${token}`)\n        console.log(options);\n      },\n    ],\n    afterResponse: [\n      async response => {\n        console.log(response);\n        const { ok, status } = response;\n        if (ok) {\n          if (status === 200) {\n            const data = await response.json();\n            if (data.code === '000000') {\n              console.log(data);\n              console.log(data instanceof Response);\n              return data;\n            } else {\n              throw new Error(data);\n            }\n          } else{\n            throw new Error('Fetch error:');\n          }\n        } else {\n          if(status === 401) {\n            toast('登录失效，重新登录！', {\n              onClick: () => {\n                window.location.href = '/admin';\n              }\n            });\n          } \n          throw new Error(`Fetch error: ${response.statusText}`, );\n        }\n\n      },\n    ],\n  },\n  timeout: 3000,\n  retry: 1,\n});\n\nexport default api;","import Ajax from './fetch_until';\ninterface LoginData {\n  username: string,\n  password: string\n}\ninterface PostQuery {\n  id?: string;\n  title: string | null;\n  content: string;\n  desc?: string;\n  tags?: string[];\n  category?: string[];\n  time?: Date | number;\n}\ninterface PostsParams {\n  tag?: string;\n  category?: string;\n}\ninterface PostId {\n  'id': string;\n}\nexport default {\n  login(data: LoginData) {\n    return Ajax.post('login', {\n      json: data\n    });\n  },\n  postPost(data: PostQuery) {\n    return Ajax.post('post', {\n      json: data,\n    });\n  },\n  patchPost(data: PostQuery) {\n    console.log(data);\n    return Ajax.patch('post', {\n      json: data,\n    });\n  },\n  deletePost(data: PostId) {\n    return Ajax.delete('post', {\n      searchParams: {\n        ...data,\n      },\n    });\n  },\n  getPosts() {\n    return Ajax.get('posts');\n  },\n  getPostDetail(data: PostId) {\n    return Ajax.get('post', {\n      searchParams: {\n        ...data,\n      },\n    });\n  }\n};\n","module.exports = __webpack_public_path__ + \"static/media/icon-avatar.4350badc.jpeg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon_avatar\":\"Login_icon_avatar__1PMVx\"};","import React from 'react';\nimport styled from 'styled-components';\n\nconst InputBox = styled.div`\n  width: 100%;\n  height: 40px;\n  position: relative;\n`\nconst Label = styled.label`\n  position: absolute;\n  left: 50%;\n  bottom: 50%;\n  color: var(--color-2);\n  font-size: 14px;\n  transform: translate3d(-50%, 50%, 0);\n  transition: all 1s;\n  cursor: pointer;\n`\nconst Line = styled.div`\n  width: 100%;\n  height: 1px;\n  background: var(--color-3);\n  border-radius: 1px;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  transform-origin: 50%;\n  transform: scale(0);\n  transition: all 0.8s;\n`\nconst Input = styled.input`\n  display: block;\n  width: 100%;\n  height: 100%;\n  font-size: 16px;\n  position: relative;\n  background: transparent;\n  color: var(--color-2);\n  text-align: center;\n  :focus {\n    & + label {\n      bottom: 100%;\n      left: 0;\n      transform: translate3d(0, 0, 0);\n    }\n    & ~ div {\n      transform: scale(1);\n    }\n  }\n  :valid {\n    & + label {\n      bottom: 100%;\n      left: 0;\n      transform: translate3d(0, 0, 0);\n    }\n    & ~ div {\n      transform: scale(1);\n    }\n  }\n`\n\ninterface Props extends React.InputHTMLAttributes<HTMLElement>{\n  inputId: string,\n  inputType?: string,\n  inputName?: string,\n  value?: string | number,\n}\nconst InputText = ({ inputId, inputType = 'text', inputName = \"name\", value, onChange }: Props) => {\n  \n  return (\n    <InputBox>\n      <input type={inputType} autoComplete=\"off\" style={{display: 'none'}}/>\n      <Input \n        type={inputType}\n        id={inputId} \n        // value={value}\n        onChange={onChange}\n        autoComplete=\"new-password\"\n        required/>\n      <Label htmlFor={inputId}>{inputName}</Label>\n      <Line/>\n    </InputBox>\n  )\n}\nexport default InputText;","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\ninterface ButtonProps {\n  load: boolean,\n  onClick?: () => void,\n}\nconst ButtonBox = styled.div`\n  width: 100%;\n  text-align: center;\n  /* border-radius: var(--border-radius-button); */\n  font-size: 14px;\n  position: relative;\n  line-height: 40px;\n  margin: 0 auto;\n  z-index: 1;\n  cursor: pointer;\n  &:active{\n    opacity: .6;\n  }\n`\nconst rotateButton = keyframes`\n  to {\n    transform: translateX(-50%) rotate(360deg);\n  }\n`\nconst ButtonBack = styled.div`\n  position: absolute;\n  left: 50%;\n  top: 0;\n  z-index: -1;\n  transform: translateX(-50%);\n  transition: width .3s;\n  animation: ${({ load } : ButtonProps) => load ? rotateButton : ''} 2s .2s infinite;\n  width: ${({ load } : ButtonProps) => load ? '40px' : '100%'};\n  height: 40px;\n  background: var(--color-3);\n  border-radius: ${({ load } : ButtonProps) => load ? '50%' : 'var(--border-radius-button)'};\n  /* border-radius: var(--border-radius-button); */\n  &::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 50%;\n    width: 6px;\n    height: 6px;\n    border-radius: 50%;\n    transform: translate(-50%, 0);\n    background: var(--color-1);\n    box-shadow: 0 0 2px 2px var(--color-1) inset;\n    opacity: ${({ load } : ButtonProps) => load ? '1' : '0'};\n  }\n`\n\nconst ButtonSign = (prop: ButtonProps) => {\n  return (\n    <ButtonBox onClick={prop.onClick}>\n      <ButtonBack load={prop.load}/>\n      <span>登录</span>\n    </ButtonBox>\n  )\n}\nexport default ButtonSign;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport IconAvatar from 'assets/images/icon-avatar.jpeg';\nimport styles from 'styles/pages/Login.module.css';\n\nimport { InputText, ButtonSign } from 'components';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport localForage from 'localforage';\nimport Api from 'api';\nimport md5 from 'md5';\n\n// import to from 'utils/to';\n\nconst Page = styled.main`\n  width: 100%;\n  height: 100%;\n  position: relative;\n  background: var(--color-1);\n`;\ninterface activeProp {\n  activeStatus: boolean\n}\nconst LoginContainer = styled.section`\n  transition: clip-path 1s cubic-bezier(1, 0.5, 0, 2);\n  clip-path: ${(prop: activeProp) => prop.activeStatus ? 'circle(300px at 160px 200px)' : 'circle(40px at 160px 200px)'};\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate3d(-50%, -50%, 0);\n  width: 320px;\n  height: 400px;\n  \n  overflow: hidden;\n`;\nconst LoginBox = styled.div`\n  height: 100%;\n  border-radius: var(--border-radius-main);\n  padding: 20px;\n  background: var(--color-4);\n`;\nconst Avatar = styled.div`\n  width: 80px;\n  height: 80px;\n  border-radius: 50%;\n  background: #000;\n  overflow: hidden;\n  position: relative;\n  z-index: 2;\n  box-sizing: content-box;\n  transition: transform 1.2s ;\n  transform: ${(prop: activeProp) => prop.activeStatus ? 'translateY(0)' : 'translateY(137px)'};\n  margin: 0 auto 40px;\n  border: 3px solid var(--color-2);\n`;\nconst InputItem = styled.div`\n  margin-bottom: 20px;\n` \nconst Login = (props: RouteComponentProps) => {\n  const { history } = props;\n  const [activeStatus, activate] = useState(false);\n  const [loginStatus, activateLogin] = useState(false);\n  const [name, setName] = useState('');\n  const [password, setPassword] = useState('');\n  const login = async () => {\n    activateLogin(true);\n    if (!name || !password) return;\n    try {\n      const md5Password = md5(password);\n      const response = await Api.login({ username: name, password: md5Password });\n      const parseRes = await response.json(); \n      console.log(parseRes);\n      await localForage.setItem('token', parseRes.data.token);\n      toast.success('login success');\n      history.push({ pathname: '/posts' });\n    } catch (error) {\n      toast.error('login error');\n      console.log(error);\n    } finally {\n      console.log('finally');\n    }\n  }\n  const nameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    console.log(e.target.value);\n    setName(e.target.value);\n  }\n  const passwrodChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    console.log(e.target.value);\n    setPassword(e.target.value);\n  }\n  return (\n    <Page>\n      <LoginContainer activeStatus={activeStatus}>\n        <LoginBox>\n          <Avatar onClick={() => activate(true)} activeStatus={activeStatus}>\n            <img className={styles.icon_avatar} src={IconAvatar} alt=\"avatar\"/>\n          </Avatar>\n          <form>\n            <InputItem>\n              <InputText inputId=\"name\" inputType=\"text\" onChange={nameChange} inputName=\"用户名\"/>\n            </InputItem>\n            <InputItem>\n              <InputText inputId=\"password\" inputType=\"password\" onChange={passwrodChange} inputName=\"密码\"/>\n            </InputItem>\n            <ButtonSign load={loginStatus} onClick={login}/>\n          </form>\n        </LoginBox>\n      </LoginContainer>\n    </Page>\n  );\n};\nexport default Login;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport loadable from '@loadable/component';\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport 'styles/route.css';\nimport Login from 'pages/Login';\n\ninterface Routes {\n  path: string,\n  component?: any,\n}\n\nconst Editor = loadable(() => import('../pages/Editor'));\nconst Posts = loadable(() => import('../pages/Posts'));\nconst routes: Array<Routes> = [\n  {\n    path: '/',\n    component: Login,\n  },\n  {\n    path: '/editor',\n    component: Editor,\n  },\n  {\n    path: '/posts',\n    component: Posts,\n  },\n];\nconst router = () => {\n  return (\n    <Router basename='/admin'>\n      <Route\n        render={({ location }) => (\n          <TransitionGroup className=\"container\">\n            <CSSTransition\n              key={location.pathname}\n              classNames=\"fade\"\n              timeout={300}\n              appear={true}\n              onExit={() => console.log(123)}\n            >\n              <Switch location={location}>\n                {routes.map((route: Routes, i: number) => (\n                  <Route exact path={route.path} key={i} component={route.component}/>\n                ))}\n              </Switch>\n            </CSSTransition>\n          </TransitionGroup>\n        )}\n      />\n    </Router>\n  );\n}\nexport default router;\n","import React, { Component } from 'react';\nimport Router from './router';\nimport './styles/reset.css';\nimport './styles/theme.css';\nimport './styles/layout.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <main className=\"theme__black app__container\">\n        <div className=\"router__container\">\n          <Router />\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './styles/toast.css';\n\ntoast.configure({\n  position: 'top-right',\n  autoClose: 10000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  toastClassName: 'toast_container',\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}